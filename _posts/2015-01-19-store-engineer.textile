---
layout: post
title:  "Web Developer - Store"
subtitle: "리디북스 스토어팀"
header-img: "img/career-bg-1.jpg"
date:   2015-01-19 01:46:41
---


h3. 리디북스 스토어팀?

스토어팀에서는 리디북스의 고객들이 책을 살펴보고 구매하는 모든 것과 관련된 것을 개발합니다. 빠르게 성장하는 서비스에서 다양한 이벤트를 운영하며 발생하는 웹서버 및 데이터베이스의 부하를 감당하는 일은 매우 도전적입니다. 2015년 1월 현재, 리디북스의 서버 스택은 아래와 같이 구성되어 있습니다.

!/img/post-ridibooks-backend-architecture.png(Ridibooks Backend Architecture)!
<figcaption>Ridibooks Backend Architecture</figcaption>

그림에서 나타나듯 리디북스 서점은 매우 다양한 서버들로 구성되어 있습니다. 스토어팀은 비교적 적은 인원으로 서버에서 발생하는 수많은 이슈를 안정적으로 처리하기 위해 노력하고 있습니다. 좋은 코드를 작성하는 것만큼이나 중요한 것은 철저한 모니터링입니다.
<hr>

h3. 서비스 운영

리디북스의 모니터링은 매우 빠르고 정확합니다. 99.999%의 고가용성을 목표로, 버그와 장애없는 안전한 운영을 위해 아래와 같이 다양한 오픈소스 및 유료 솔루션을 도입하여 활용하고 있습니다. 도서정가제가 실시되는 날에도 서버를 안정적으로 운영할 수 있었던 것도 이러한 모니터링 도구의 도움이 매우 컸습니다.

* 30+ 이상의 서버 리소스를 모니터링하기 위한 *Munin(On-Demend)* 및 *NewRelic(SaaS)*
* 서버에서 발생하는 각종 오류와 예외를 모니터링하기 위한 *Sentry*
* 전 세계 각 지역에서 로그인, 결제 등 서점의 핵심적인 기능의 정상 여부를 모니터링하는 *Pingdom*
* 각종 배치작업과 주기적으로 실행되는 스크립트를 모니터링하기 위한 *PushMon*
* MariaDB의 부하를 감지하고 Slow Query를 모니터링하는 *Percona Tools*
* 각종 데이터의 무결성을 주기적으로 감지하는 *In-house* 스크립트
<hr>

h3. 마이크로서비스 아키텍쳐

리디북스의 서버 아키텍쳐는 모놀리식이 아닌 서비스 기반의 마이크로 형태를 지향합니다. 예를 들면, 아래와 같은 서점의 다양한 모듈들은 별도의 서비스로 구현되어있습니다. (마이크로서비스 아키텍쳐가 모놀리식 아키텍쳐에 비해 가지는 장단점은 ["여기":http://bcho.tistory.com/948]에서 매우 자세히 설명하고 있습니다.)

* 개인화 추천 서비스
* 실시간 많이 보는 책 서비스
* 미리보기 서비스
* API 서비스
* 검색 서비스
* 알림센터 서비스

서비스 지향적인 아키텍쳐를 만든다는 것은 구성원 개개인의 높은 실력과 책임감을 요구하지만, 새로운 기술을 접할 수 있는 기회와 자율성을 제공합니다. 스토어팀에서는 이를 자신있게 수행해낼 인재를 찾고 있습니다.
<hr>

h3. Back-end Engineering

서점에서 다루는 정보는 생각보다 매우 많습니다. 다양한 책의 메타정보와 상품 구성, 판매 방식, 기능들은 서로 얽히고 섥혀있어 복잡도가 매우 높습니다. 리디북스 스토어팀은 이러한 환경에서 더 유연하고 빠른 개발을 위해 ["DDD":http://en.wikipedia.org/wiki/Domain-driven_design], ["TDD":http://en.wikipedia.org/wiki/Test-driven_development]를 지향하며, 모든 팀원이 참여하는 토론을 통해 합리적인 개발 가이드를 세우고 따릅니다. 레거시 코드를 개발 가이드에 맞춰 리팩토링하는 작업은 스토어팀의 주요 업무 중 하나이며, 서점 내 모든 주요 기능들에 대해 Unit Test가 준비되어 있습니다.

개발 스택은 각 기능의 요구사항을 구현하는데 최적인 플랫폼을 적극적으로 수용합니다. 현재 서점을 구성하고 있는 스택은 다음과 같습니다.

* 대용량 DB를 위한 *Galera Cluster, MariaDB Master-Slave*
* 개인화 추천 및 실시간 도서 랭킹을 위한 *Node.js, Redis*
* 각종 동기화를 위한 *Couchbase*
* 검색을 위한 *Solr*
* 테스트를 위한 *PHPUnit, Selenium*
<hr>

h3. Front-end Engineering

리디북스 서점은 비교적 최신의 브라우저 사양을 요구하는 편입니다. 크롬, 파이어폭스, 사파리, IE9이상를 권장하며, 특히 IE는 10이상이 되어야 모든 기능을 정상적으로 사용할 수 있습니다. 아직까지 IE9 미만의 브라우저가 매우 높은 점유율을 차지하고 있는 한국의 인터넷 사용 환경을 따져보면, 하위 호환을 포기하는 것은 매우 중요한 결정이었습니다. 하지만 우리는 보다 높은 사용자 경험을 제공하기 위해 HTML5, CSS3를 적극적으로 활용하기로 하였으며, 클라이언트의 렌더링 비율도 점차 높여나가고 있습니다.

서점의 프론트엔드는 아래의 오픈소스들을 이용하여 만들어집니다.

* 프론트엔드 패키지 관리를 위한 *Bower*
* AMD 형태의 자바스크립트 코드의 의존성 관리를 위한 *RequireJS*
* CSS를 작고 효율적으로 관리하기 위한 *Less*
* jshint, ugilify, csslint 등 일련의 배치작업을 자동화하기 위한 *Grunt*
* 렌더링 성능을 끌어올리고 View를 효율적으로 작성하기 위한 *React.js*
<hr>

h3. Workflow

스토어팀에서는 효율적인 업무 프로세스를 위해 아래와 같은 도구들도 활용하고 있습니다.

* 소스코드의 버전관리를 위한 *Mercurial & Git*
* 일관되고 편한 개발환경을 구축하기 위한 *Vagrant & Ansible*
* 지식 공유를 위한 *Confluence*
* 프로젝트 및 이슈 관리를 위한 *Asana*
* 코드 리뷰를 위한 *RhodeCode*
* 팀 커뮤니케이션을 위한 *Slack*
<hr>

h3. 스토어팀에 합류하게 된다면...

3개월 이내에는 다음과 같은 일을 하게 됩니다.

* 리디북스 스토어팀의 데이터 모델링 규칙, 코드 개발 가이드, DDD 개념, ORM 사용법을 익힙니다.
* 스토어를 구성하는 코드 베이스를 파악하기 위한 과제가 주어집니다.
* 적극적인 코드 리뷰를 통해 더 나은 코드를 작성하는 방법을 찾습니다.
* 고객 관점에서 생각하는 문화를 배웁니다.

6개월 이내에는 다음과 같은 일을 하게 됩니다.

* 서점을 운영하는데 필요한 CMS 및 In-House 도구들을 알게 됩니다.
* 기존 코드의 문제점을 스스로 찾아 개선합니다.
* 서점을 개선하는 프로젝트를 맡아 진행합니다.

12개월 이내에는 다음과 같은 일을 하게 됩니다.

* 리디북스의 풀스택을 이해하게 됩니다.
* DevOps를 실천하기 위한 도구와 배포환경을 알게 됩니다.
* 더 효율적이고 건강한 개발 문화, 환경을 만들어 나가는데 동참합니다.
<hr>

<div class="text-center apply-area">
	<strong>{{ page.title }}</strong>
	<span>{{ page.subtitle }}</span>
	<a class="typeform-share btn-apply" href="https://hyunwoo.typeform.com/to/fEumaA" data-mode="1" target="_blank">지원하기 <i class="icon-direct-right"></i></a>
	<script>(function(){var qs,js,q,s,d=document,gi=d.getElementById,ce=d.createElement,gt=d.getElementsByTagName,id='typef_orm',b='https://s3-eu-west-1.amazonaws.com/share.typeform.com/';if(!gi.call(d,id)){js=ce.call(d,'script');js.id=id;js.src=b+'share.js';q=gt.call(d,'script')[0];q.parentNode.insertBefore(js,q)}})()</script>	
</div>

<hr>














